<!DOCTYPE html
  SYSTEM "about:legacy-compat">
<html xmlns="http://www.w3.org/1999/xhtml">


    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <link rel="stylesheet" type="text/css" href="explain.css" />
        <title>XSLT Exercise 3 (CDV)</title>
    </head>



    <body>
        <!--#include virtual="topAuthorRJP43.html" -->
        <h1><span class="banner">XSLT Exercise 3</span></h1>
        <span class="smaller">This assignment is an edited compilation of <a
                href="XSLTExercise5.html">XSLT Exercise 5</a> and <a href="XSLTExercise6.html">XSLT
                Exercise 6</a> from our <a href="CDASyll.html">Coding and Digital Archives
                course</a></span>
        <h3>The input collection on our DHClass-Hub</h3>
        <p>For this assignment, you will be working with a digitized XML collection of Emily
            Dickinson's poems and you will need to access this collection in GitHub. This assignment
            requires you to use our <strong>DHClass-Hub</strong> so you can work with a <strong>a
                local directory of files</strong> rather than just one at a time as we have been
            doing up to this point. Here is how to access the directory:</p>
        <ul>
            <li>Pull any new changes into your local computer from the DHClass-Hub to your computer
                (sync DHClass-Hub), or <a href="https://github.com/ebeshero/DHClass-Hub">clone the
                    repository</a> if it is not already on your computer. (If you have not synced or
                cloned a GitHub repository in a while; please see the <a
                    href="https://github.com/ebeshero/DHClass-Hub#dhclass-hub">instructions posted
                    in our Readme file</a> or review our <a href="explainGitShell.html">Guide to Git
                    Shell</a>). </li>
            <li>When you have synced the repository, open the DHClass-Hub locally on your computer,
                and find in it the <strong>Tutorials-andAssignments</strong> directory. Inside it is
                a directory named <strong>XSLT</strong>. Then there is another directory named
                    <strong>Dickinson</strong> that contains eleven XML files that we are working
                with as a collection in this assignment.</li>
            <li><strong>Copy this Dickinson directory to some other location on your
                    computer</strong> outside of your GitHub directories. (We do not want you to
                push your homework to the whole class over our DHClass-Hub, so we just need you to
                make your own private copy of this directory can sit in the same place on your local
                computer in which you do your homework for this assignment.</li>
            <li>Do not rename the file folder or the files inside, as you will need to refer to them
                as a coherent collection.</li>
        </ul>
        <p>Please be careful to <strong>copy</strong> rather than move the directory out of GitHub!
            If you move it out of the directory, the next time you sync our DHClass-Hub, GitHub will
            prompt you to commit the change and push it, which will effectively eliminate the
            Dickinson folder. One of us instructors can easily put it back if that happens, but
            please alert us ASAP if something goes awry!</p>
        <h3>Working with a Collection of Files in XSLT</h3>
        <p>Emily Dickinson made little bundles of her manuscript poems with a needle and thread, and
            these have come to be known as <dfn>fascicles</dfn> by Dickinson scholars. We have
            digitally reproduced a bundle that Dickinson scholars have named Fascicle 16 by using a
            folder or directory, which holds a digital collection of files together. We can process
            a whole directory of files using the <code>collection()</code> function in XSLT, so we
            can represent content from a whole collection of XML files in one or more output HTML
            files. One useful application for working with a collection is to process several short
            XML files and unify them on a single HTML page designed to merge their content. In this
            case, we will be representing the poems encoded in eleven small XML files inside one
            HTML page, which we will produce with a table of contents giving poems by number and
            first lines, followed by the full text of the poems themselves, formatted in HTML with
            numbered lines. Since these poems are all encoded with the same structural elements, we
            can use the <code>collection()</code> function to reach into them as a group, and output
            their content one by one based on their XML hierarchy. Really, we are treating the
            collection itself as part of the hierarchy as we write our XSLT, so we move from the
            directory down into the document node of each file to do our XSLT processing.</p>
        <h3>Using modal XSLT</h3>
        <p>Besides working with a collection of files, the other interesting new application in this
            assignment is <strong>modal XSLT</strong>, which lets you process the same nodes in your
            document in two different ways. How can you output the same element contents to sit as
            list items in a table of contents at the top of an HTML page, <em>and also</em> as
            headers positioned throughout the body of your document, below the table of contents?
            Wouldnâ€™t it be handy to be able to have two completely different template rules that
            match exactly the same elements: one rule to output the data as list items in the table
            of contents, and the other to output the same data as headers? You can write two
            template rules that will match the same nodes (have the same value for their
                <code>@match</code> attribute), but how do you make sure that the correct template
            rule is handling the data in the correct place?</p>
        <p>To permit us to write multiple template rules that process the same input nodes in
            different ways for different purposes, we write <strong>modal XSLT</strong>, and that is
            what you will be learning to write with this assignment. Modal XSLT allows you to output
            the same parts of the input XML document in multiple locations and treat them
            differently each time. That is, it lets you have two different template rules for
            processing the same elements or other nodes in different ways, and you use the
                <code>@mode</code> attribute to control how the elements are processed <em>at a
                particular place</em> in the transformation. Please read the explanation and view
            the examples in <a href="http://dh.obdurodon.org/modal-xslt.html">Obdurodon's tutorial
                on Modal XSLT</a> before proceeding with the assignment, so you can see where and
            how to set the <code>@mode</code> attribute and how it works to control processing.</p>
        NEED TO INCLUDE: <a href="http://dh.obdurodon.org/xslt-basics-2.xhtml">Obdurodon's tutorial
            on XSLT advanced features</a>
        <!-- use this for xsl:if statement that will choose whether or not there is a line break (</br>) after each line pending if it the last line of the poem or not-->
    </body>
</html>
